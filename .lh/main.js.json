{
    "sourceFile": "main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1732987564150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1732987564150,
            "name": "Commit-0",
            "content": "const difficulties = {\n    beginner: {\n        rows: 9,\n        cols: 9,\n        mines: 10\n    },\n    intermediate: {\n        rows: 16,\n        cols: 16,\n        mines: 40\n    },\n    expert: {\n        rows: 24,\n        cols: 24,\n        mines: 99\n    }\n};\n\nlet board = [];\nlet revealed = [];\nlet flagged = [];\nlet gameOver = false;\nlet firstClick = true;\nlet timer = 0;\nlet timerInterval;\nlet currentDifficulty = difficulties.beginner;\nlet flagCount = 0;\n\nfunction initializeBoard() {\n    const {\n        rows,\n        cols\n    } = currentDifficulty;\n    board = Array(rows).fill().map(() => Array(cols).fill(0));\n    revealed = Array(rows).fill().map(() => Array(cols).fill(false));\n    flagged = Array(rows).fill().map(() => Array(cols).fill(false));\n    gameOver = false;\n    firstClick = true;\n    flagCount = 0;\n\n    updateDisplay();\n    createBoard();\n    resetTimer();\n}\n\n// Replace the entire createBoard function with this:\nfunction createBoard() {\nconst gameBoard = document.getElementById('gameBoard');\nconst { rows, cols } = currentDifficulty;\n\ngameBoard.style.gridTemplateColumns = `repeat(${cols}, 1fr)`;\ngameBoard.innerHTML = '';\n\n// Responsive cell size calculation\nconst viewportWidth = Math.min(window.innerWidth - 32, 500);\nconst viewportHeight = window.innerHeight - 200; // Account for header and controls\nconst maxSize = Math.min(viewportWidth / cols, viewportHeight / rows, 40);\nconst cellSize = Math.max(maxSize, 32); // Minimum 32px for touch\n\nfor (let i = 0; i < rows; i++) {\nfor (let j = 0; j < cols; j++) {\n    const cell = document.createElement('button');\n    cell.className = 'cell';\n    cell.style.width = `${cellSize}px`;\n    cell.style.height = `${cellSize}px`;\n    \n    // Touch-friendly event handling\n    if ('ontouchstart' in window) {\n        let touchTimeout;\n        let touchStartTime;\n        \n        cell.addEventListener('touchstart', (e) => {\n            e.preventDefault();\n            touchStartTime = new Date().getTime();\n            touchTimeout = setTimeout(() => {\n                handleRightClick(i, j);\n            }, 500);\n        });\n        \n        cell.addEventListener('touchend', (e) => {\n            const touchEndTime = new Date().getTime();\n            clearTimeout(touchTimeout);\n            if (touchEndTime - touchStartTime < 500) {\n                handleClick(i, j);\n            }\n        });\n    } else {\n        cell.onclick = () => handleClick(i, j);\n        cell.oncontextmenu = (e) => {\n            e.preventDefault();\n            handleRightClick(i, j);\n        };\n    }\n    \n    gameBoard.appendChild(cell);\n}\n}\n}\n\nfunction placeMines(firstRow, firstCol) {\n    const {\n        rows,\n        cols,\n        mines\n    } = currentDifficulty;\n    let minesPlaced = 0;\n\n    while (minesPlaced < mines) {\n        const row = Math.floor(Math.random() * rows);\n        const col = Math.floor(Math.random() * cols);\n\n        if (board[row][col] !== -1 &&\n            (Math.abs(row - firstRow) > 1 || Math.abs(col - firstCol) > 1)) {\n            board[row][col] = -1;\n            minesPlaced++;\n        }\n    }\n\n    // Calculate numbers\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (board[i][j] !== -1) {\n                let count = 0;\n                for (let di = -1; di <= 1; di++) {\n                    for (let dj = -1; dj <= 1; dj++) {\n                        const ni = i + di;\n                        const nj = j + dj;\n                        if (ni >= 0 && ni < rows && nj >= 0 && nj < cols && board[ni][nj] === -1) {\n                            count++;\n                        }\n                    }\n                }\n                board[i][j] = count;\n            }\n        }\n    }\n}\n\nfunction handleClick(row, col) {\n    if (gameOver || flagged[row][col]) return;\n\n    if (firstClick) {\n        firstClick = false;\n        placeMines(row, col);\n        startTimer();\n    }\n\n    if (board[row][col] === -1) {\n        gameOver = true;\n        revealAll();\n        clearInterval(timerInterval);\n        return;\n    }\n\n    revealCell(row, col);\n    checkWin();\n}\n\nfunction handleRightClick(row, col) {\n    if (gameOver || revealed[row][col]) return;\n\n    flagged[row][col] = !flagged[row][col];\n    flagCount += flagged[row][col] ? 1 : -1;\n    updateDisplay();\n}\n\nfunction revealCell(row, col) {\n    if (revealed[row][col] || flagged[row][col]) return;\n\n    revealed[row][col] = true;\n    const cell = document.getElementsByClassName('cell')[row * currentDifficulty.cols + col];\n    cell.classList.add('revealed');\n\n    if (board[row][col] === 0) {\n        // Reveal neighbors for empty cells\n        for (let di = -1; di <= 1; di++) {\n            for (let dj = -1; dj <= 1; dj++) {\n                const ni = row + di;\n                const nj = col + dj;\n                if (ni >= 0 && ni < currentDifficulty.rows &&\n                    nj >= 0 && nj < currentDifficulty.cols) {\n                    revealCell(ni, nj);\n                }\n            }\n        }\n    } else if (board[row][col] > 0) {\n        cell.textContent = board[row][col];\n        cell.classList.add(`number-${board[row][col]}`);\n    }\n}\n\nfunction revealAll() {\n    const cells = document.getElementsByClassName('cell');\n    for (let i = 0; i < currentDifficulty.rows; i++) {\n        for (let j = 0; j < currentDifficulty.cols; j++) {\n            const cell = cells[i * currentDifficulty.cols + j];\n            if (board[i][j] === -1) {\n                cell.classList.add('mine');\n                cell.textContent = 'ðŸ’£';\n            } else if (!revealed[i][j]) {\n                revealed[i][j] = true;\n                cell.classList.add('revealed');\n                if (board[i][j] > 0) {\n                    cell.textContent = board[i][j];\n                    cell.classList.add(`number-${board[i][j]}`);\n                }\n            }\n        }\n    }\n}\n\nfunction checkWin() {\n    for (let i = 0; i < currentDifficulty.rows; i++) {\n        for (let j = 0; j < currentDifficulty.cols; j++) {\n            if (board[i][j] !== -1 && !revealed[i][j]) return;\n        }\n    }\n    gameOver = true;\n    clearInterval(timerInterval);\n    alert('Congratulations! You won! ðŸŽ‰');\n}\n\nfunction updateDisplay() {\n    document.getElementById('mineCount').textContent = currentDifficulty.mines;\n    document.getElementById('flagCount').textContent = flagCount;\n}\n\nfunction startTimer() {\n    timer = 0;\n    clearInterval(timerInterval);\n    timerInterval = setInterval(() => {\n        timer++;\n        document.getElementById('timer').textContent =\n            timer.toString().padStart(3, '0');\n    }, 1000);\n}\n\nfunction resetTimer() {\n    clearInterval(timerInterval);\n    timer = 0;\n    document.getElementById('timer').textContent = '000';\n}\n\nfunction changeDifficulty() {\n    const difficulty = document.getElementById('difficulty').value;\n    currentDifficulty = difficulties[difficulty];\n    newGame();\n}\n\nfunction newGame() {\n    clearInterval(timerInterval);\n    initializeBoard();\n}\n// Add this after your other initialization code\nwindow.addEventListener('resize', () => {\n    createBoard();\n    // Restore the current game state\n    const cells = document.getElementsByClassName('cell');\n    for (let i = 0; i < currentDifficulty.rows; i++) {\n        for (let j = 0; j < currentDifficulty.cols; j++) {\n            const cell = cells[i * currentDifficulty.cols + j];\n            if (revealed[i][j]) {\n                cell.classList.add('revealed');\n                if (board[i][j] > 0) {\n                    cell.textContent = board[i][j];\n                    cell.classList.add(`number-${board[i][j]}`);\n                }\n            }\n            if (flagged[i][j]) {\n                cell.classList.add('flagged');\n                cell.textContent = 'ðŸš©';\n            }\n        }\n    }\n});\n\n// Add orientation change handling\nwindow.addEventListener('orientationchange', () => {\n    setTimeout(createBoard, 100);\n});\n// Initialize the game\ninitializeBoard();\n"
        }
    ]
}